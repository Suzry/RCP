from xmlrpc.server import SimpleXMLRPCServer
from xmlrpc.server import SimpleXMLRPCRequestHandler
from typing import Dict, Set, List


class RequestHandler(SimpleXMLRPCRequestHandler):
    rpc_paths = ("/RPC2",)


class ChatServer:
    def __init__(self):
        self.chat_rooms: Dict[str, Dict[str, Set | List]] = {}

    def create_room(self, room_name: str) -> bool:
        if room_name in self.chat_rooms:
            return False
        self.chat_rooms[room_name] = {"participants": set(), "messages": []}
        print(f"Chat room '{room_name}' created.")
        return True

    def connect(self, room_name: str, user_name: str) -> bool:
        if room_name not in self.chat_rooms:
            return False
        if user_name in self.chat_rooms[room_name]["participants"]:
            return False
        self.chat_rooms[room_name]["participants"].add(user_name)
        join_message = f"{user_name} has joined {room_name}."
        self.chat_rooms[room_name]["messages"].append(join_message)
        print(join_message)
        return True

    def leave(self, room_name: str, user_name: str) -> bool:
        if room_name not in self.chat_rooms or user_name not in self.chat_rooms[room_name]["participants"]:
            return False
        self.chat_rooms[room_name]["participants"].remove(user_name)
        leave_message = f"{user_name} has left {room_name}."
        self.chat_rooms[room_name]["messages"].append(leave_message)
        print(leave_message)
        return True

    def say(self, room_name: str, user_name: str, message: str) -> bool:
        if room_name not in self.chat_rooms or user_name not in self.chat_rooms[room_name]["participants"]:
            return False
        full_message = f"{user_name}: {message}"
        self.chat_rooms[room_name]["messages"].append(full_message)
        print(full_message)
        return True

    def who(self, room_name: str) -> List[str]:
        if room_name not in self.chat_rooms:
            return []
        return list(self.chat_rooms[room_name]["participants"])

    def get_messages(self, room_name: str) -> List[str]:
        if room_name not in self.chat_rooms:
            return []
        return self.chat_rooms[room_name]["messages"]

    def list_rooms(self) -> List[str]:
        return list(self.chat_rooms.keys())


if __name__ == "__main__":
    server = SimpleXMLRPCServer(("localhost", 8000), requestHandler=RequestHandler, allow_none=True)
    print("Server is running on port 8000...")

    chat_server = ChatServer()
    server.register_instance(chat_server, allow_dotted_names=True)

    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("Server shutting down...")
